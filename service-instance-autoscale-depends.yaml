heat_template_version: 2015-04-30

description: Autoscaling Contrail Cloud HOT

parameters:
  virtual_network_1:
    type: string
    description: management_virtual_network for the ServiceInstance
  virtual_network_1_fqdn:
    type: string
  virtual_network_2:
    type: string
    description: left_virtual_network for the ServiceInstance
  virtual_network_2_fqdn:
    type: string
    description: left_virtual_network for the ServiceInstance
  virtual_network_3:
    type: string
    description: right_virtual_network for the ServiceInstance
  virtual_network_3_fqdn:
    type: string
    description: right_virtual_network for the ServiceInstance
  image:
    type: string
    description: Name of the image
  flavor:
    type: string
    description: Flavor
  availability_zone:
    type: string
    description: Availability Zone
  service_instance_name:
    type: string
    label: Service instance fq name
    description: Service instance for port tuple
  service_interface_type_1:
    type: string
    description: service_interface_type for the ServiceTemplate
  service_interface_type_2:
    type: string
    description: service_interface_type for the ServiceTemplate
  service_interface_type_3:
    type: string
    description: service_interface_type for the ServiceTemplate
  port_tuple_name:
    type: string
    description: name of Port Tuple

  ecmp_hashing_include_fields_hashing_configured:
    type: boolean
    description: When True, Packet header fields used in calculating ECMP hash is decided by following flags
  ecmp_hashing_include_fields_source_ip:
    type: boolean
    description: When false, do not use source ip in the ECMP hash calculation
  ecmp_hashing_include_fields_destination_ip:
    type: boolean
    description: When false, do not use destination ip in the ECMP hash calculation
  ecmp_hashing_include_fields_ip_protocol:
    type: boolean
    description: When false, do not use ip protocol in the ECMP hash calculation
  ecmp_hashing_include_fields_source_port:
    type: boolean
    description: When false, do not use source port in the ECMP hash calculation
  ecmp_hashing_include_fields_destination_port:
    type: boolean
    description: When false, do not use destination port in the ECMP hash calculation
  wc_notify:
    type: string
    description: curl command for notify wait_condition resource whether VM is up or not  
  mgmt_gateway:
    type: string
    description: default gateway for management network

resources:
  template_PortTuple:
    type: OS::ContrailV2::PortTuple
    properties:
      name: { get_param: port_tuple_name }
      service_instance: { get_param: service_instance_name }

  template_VirtualMachineInterface_1:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      name: { get_param: virtual_network_1 }
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: service_interface_type_1 },
        }
      port_tuple_refs: [{ get_resource: template_PortTuple }]
      virtual_network_refs: [{ get_param: virtual_network_1_fqdn }]

  template_VirtualMachineInterface_2:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      name: { get_param: virtual_network_2 }
      ecmp_hashing_include_fields:
        {
          ecmp_hashing_include_fields_hashing_configured: { get_param: ecmp_hashing_include_fields_hashing_configured },
          ecmp_hashing_include_fields_source_ip: { get_param: ecmp_hashing_include_fields_source_ip },
          ecmp_hashing_include_fields_destination_ip: { get_param: ecmp_hashing_include_fields_destination_ip },
          ecmp_hashing_include_fields_ip_protocol: { get_param: ecmp_hashing_include_fields_ip_protocol },
          ecmp_hashing_include_fields_source_port: { get_param: ecmp_hashing_include_fields_source_port },
          ecmp_hashing_include_fields_destination_port: { get_param: ecmp_hashing_include_fields_destination_port },
        }
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: service_interface_type_2 },
        }
      port_tuple_refs: [{ get_resource: template_PortTuple }]
      virtual_network_refs: [{ get_param: virtual_network_2_fqdn }]

  template_VirtualMachineInterface_3:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      name: { get_param: virtual_network_3 }
      ecmp_hashing_include_fields:
        {
          ecmp_hashing_include_fields_hashing_configured: { get_param: ecmp_hashing_include_fields_hashing_configured },
          ecmp_hashing_include_fields_source_ip: { get_param: ecmp_hashing_include_fields_source_ip },
          ecmp_hashing_include_fields_destination_ip: { get_param: ecmp_hashing_include_fields_destination_ip },
          ecmp_hashing_include_fields_ip_protocol: { get_param: ecmp_hashing_include_fields_ip_protocol },
          ecmp_hashing_include_fields_source_port: { get_param: ecmp_hashing_include_fields_source_port },
          ecmp_hashing_include_fields_destination_port: { get_param: ecmp_hashing_include_fields_destination_port },
        }
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: service_interface_type_3 },
        }
      port_tuple_refs: [{ get_resource: template_PortTuple }]
      virtual_network_refs: [{ get_param: virtual_network_3_fqdn }]

  template_InstanceIp_1:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_1 ]
    properties:
      name: { get_param: virtual_network_1 }
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_1 }]
      virtual_network_refs: [{ get_param: virtual_network_1_fqdn }]

  template_InstanceIp_2:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_2 ]
    properties:
      name: { get_param: virtual_network_2 }
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_2 }]
      virtual_network_refs: [{ get_param: virtual_network_2_fqdn }]

  template_InstanceIp_3:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_3 ]
    properties:
      name: { get_param: virtual_network_3 }
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_3 }]
      virtual_network_refs: [{ get_param: virtual_network_3_fqdn }]

  instance:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_1, template_InstanceIp_2 , template_InstanceIp_3 ]
    properties:
      name:
      image: { get_param:  image }
      flavor: { get_param: flavor }
      availability_zone: { get_param: availability_zone }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_1 }
        - port: { get_resource: template_VirtualMachineInterface_2 }
        - port: { get_resource: template_VirtualMachineInterface_3 }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh
            echo -e "a\na" | passwd root

            cat << EOL > /etc/sysconfig/network-scripts/ifcfg-eth1
            DEVICE=eth1
            BOOTPROTO=dhcp
            TYPE=Ethernet
            ONBOOT=yes
            EOL
            ifconfig eth1 up
            
            cat << EOL > /etc/sysconfig/network-scripts/ifcfg-eth2
            DEVICE=eth2
            BOOTPROTO=dhcp
            TYPE=Ethernet
            ONBOOT=yes
            EOL
            ifconfig eth2 up

            echo "GATEWAY=mgmt_gateway" >> /etc/sysconfig/network

            service network restart
            ip link add name br0 type bridge 
            ip link set dev br0 up
            ip link set dev eth1 master br0
            ip link set dev eth2 master br0

            wc_notify --data-binary '{"status": "SUCCESS"}'
          params:
            wc_notify: { get_param: wc_notify }
            mgmt_gateway: { get_param: mgmt_gateway }
